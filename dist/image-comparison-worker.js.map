{"version":3,"file":"image-comparison-worker.js","sources":["../lib/third_party/pixelmatch/color-delta.js","../lib/common.js","../lib/image-comparison-worker.js"],"sourcesContent":["/* @license ISC\n * @see LICENSE\n */\n// NOTE(cdata): This is an adapted subset of the original pixelmatch library.\n// The top-level API of the original library has been omitted, as we only make\n// use of the lower-level features that aren't actually exported by the upstream\n// module.\n// calculate color difference according to the paper \"Measuring perceived color\n// difference using YIQ NTSC transmission color space in mobile applications\" by\n// Y. Kotsarenko and F. Ramos\nexport function colorDelta(img1, img2, k, m, yOnly = false) {\n    var a1 = img1[k + 3] / 255, a2 = img2[m + 3] / 255, r1 = blend(img1[k + 0], a1), g1 = blend(img1[k + 1], a1), b1 = blend(img1[k + 2], a1), r2 = blend(img2[m + 0], a2), g2 = blend(img2[m + 1], a2), b2 = blend(img2[m + 2], a2), y = rgb2y(r1, g1, b1) - rgb2y(r2, g2, b2);\n    if (yOnly)\n        return y; // brightness difference only\n    var i = rgb2i(r1, g1, b1) - rgb2i(r2, g2, b2), q = rgb2q(r1, g1, b1) - rgb2q(r2, g2, b2);\n    return 0.5053 * y * y + 0.299 * i * i + 0.1957 * q * q;\n}\nfunction rgb2y(r, g, b) {\n    return r * 0.29889531 + g * 0.58662247 + b * 0.11448223;\n}\nfunction rgb2i(r, g, b) {\n    return r * 0.59597799 - g * 0.27417610 - b * 0.32180189;\n}\nfunction rgb2q(r, g, b) {\n    return r * 0.21147017 - g * 0.52261711 + b * 0.31114694;\n}\n// blend semi-transparent color with white\nfunction blend(c, a) {\n    return 255 + (c - 255) * a;\n}\nexport function drawPixel(output, pos, r, g, b) {\n    output[pos + 0] = r;\n    output[pos + 1] = g;\n    output[pos + 2] = b;\n    output[pos + 3] = 255;\n}\n//# sourceMappingURL=color-delta.js.map","/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { colorDelta } from './third_party/pixelmatch/color-delta.js';\nexport const COMPONENTS_PER_PIXEL = 4;\n// 35215 is the maximum possible value for the YIQ difference metric\n// @see https://github.com/mapbox/pixelmatch/blob/master/index.js#L14\n// @see http://www.progmat.uaem.mx:8080/artVol2Num2/Articulo3Vol2Num2.pdf\nexport const MAX_COLOR_DISTANCE = 35215;\nexport const DEVICE_PIXEL_RATIO = 2;\n// use this threshold to do automatic fidelity test for model-viewer. any\n// scenario whose rms value (in dB) is bigger than the threshold will fail.\nexport const FIDELITY_TEST_THRESHOLD = -22;\nexport class ImageComparator {\n    constructor(candidateImage, goldenImage, dimensions) {\n        this.candidateImage = candidateImage;\n        this.goldenImage = goldenImage;\n        this.dimensions = dimensions;\n        const { width, height } = dimensions;\n        this.imagePixels = width * height;\n    }\n    drawPixel(image, position, r, g, b, a = 255) {\n        image[position + 0] = r;\n        image[position + 1] = g;\n        image[position + 2] = b;\n        image[position + 3] = a;\n    }\n    generateVisuals(threshold) {\n        const { candidateImage, goldenImage } = this;\n        const { width, height } = this.dimensions;\n        const blackWhiteImage = new Uint8ClampedArray(this.imagePixels * COMPONENTS_PER_PIXEL);\n        const deltaImage = new Uint8ClampedArray(this.imagePixels * COMPONENTS_PER_PIXEL);\n        const thresholdSquared = threshold * threshold;\n        let maximumDeltaIntensity = 0;\n        if (candidateImage.length != goldenImage.length) {\n            throw new Error(`Image sizes do not match (candidate: ${candidateImage.length}, golden: ${goldenImage.length})`);\n        }\n        for (let y = 0; y < height; ++y) {\n            for (let x = 0; x < width; ++x) {\n                const index = y * width + x;\n                const position = index * COMPONENTS_PER_PIXEL;\n                const delta = colorDelta(candidateImage, goldenImage, position, position);\n                const exactlyMatched = (delta <= thresholdSquared ? 1 : 0) * 255;\n                const thresholdDelta = Math.max(0, delta - thresholdSquared);\n                const deltaIntensity = Math.round(255 * thresholdDelta / MAX_COLOR_DISTANCE);\n                maximumDeltaIntensity = Math.max(deltaIntensity, maximumDeltaIntensity);\n                this.drawPixel(blackWhiteImage, position, exactlyMatched, exactlyMatched, exactlyMatched);\n                this.drawPixel(deltaImage, position, 255, 255 - deltaIntensity, 255 - deltaIntensity);\n            }\n        }\n        for (let y = 0; y < height; ++y) {\n            for (let x = 0; x < width; ++x) {\n                const index = y * width + x;\n                const position = index * COMPONENTS_PER_PIXEL;\n                const absoluteDeltaIntensity = 255 - deltaImage[position + 1];\n                const relativeDeltaIntensity = Math.round(255 - 255 * (absoluteDeltaIntensity / maximumDeltaIntensity));\n                this.drawPixel(deltaImage, position, 255, relativeDeltaIntensity, relativeDeltaIntensity);\n            }\n        }\n        return {\n            imageBuffers: { delta: deltaImage.buffer, blackWhite: blackWhiteImage.buffer }\n        };\n    }\n    analyze() {\n        const { candidateImage, goldenImage } = this;\n        const { width, height } = this.dimensions;\n        let squareSum = 0;\n        if (candidateImage.length != goldenImage.length) {\n            throw new Error(`Image sizes do not match (candidate: ${candidateImage.length}, golden: ${goldenImage.length})`);\n        }\n        let modelPixelCount = 0;\n        let colorlessPixelCount = 0;\n        for (let y = 0; y < height; ++y) {\n            for (let x = 0; x < width; ++x) {\n                const index = y * width + x;\n                // image's pixel data is stored in an 1-D array, 1st row sequentialy,\n                // then 2nd row, .. for each pixel, its data is stored by order of r, g,\n                // b, a.  here position is the index for current pixel's r , position+3\n                // is index for its alpha\n                const position = index * COMPONENTS_PER_PIXEL;\n                // alpha is in range 0~255 here, map it to 0~1\n                const alpha = candidateImage[position + 3] / 255;\n                let isWhitePixel = true;\n                let isBlackPixel = true;\n                for (let i = 0; i < 3; i++) {\n                    const colorComponent = candidateImage[position + i] * alpha;\n                    if (colorComponent != 255) {\n                        isWhitePixel = false;\n                    }\n                    if (colorComponent != 0) {\n                        isBlackPixel = false;\n                    }\n                }\n                if (isBlackPixel || isWhitePixel) {\n                    colorlessPixelCount++;\n                }\n                if (alpha === 0) {\n                    continue;\n                }\n                const delta = colorDelta(candidateImage, goldenImage, position, position);\n                squareSum += delta * delta;\n                modelPixelCount++;\n            }\n        }\n        const imagePixelCount = width * height;\n        if (colorlessPixelCount === imagePixelCount) {\n            throw new Error('Candidate image is colorless!');\n        }\n        const rmsDistanceRatio = Math.sqrt(squareSum / modelPixelCount) / MAX_COLOR_DISTANCE;\n        return { analysis: { rmsDistanceRatio } };\n    }\n}\nexport function toDecibel(value) {\n    return 10 * Math.log10(value);\n}\n//# sourceMappingURL=common.js.map","/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ImageComparator } from './common.js';\nclass ImageComparisonWorker {\n    constructor() {\n        this.analyzer = null;\n        this.candidateCanvas = null;\n        this.candidateContext = null;\n        this.goldenCanvas = null;\n        this.goldenContext = null;\n        this.blackWhiteCanvas = null;\n        this.blackWhiteContext = null;\n        this.deltaCanvas = null;\n        this.deltaContext = null;\n        self.onmessage = (event) => this.onGlobalMessage(event);\n    }\n    onMessage(event, port) {\n        const data = event.data;\n        switch (data.type) {\n            case 'canvases-ready': {\n                const { candidateCanvas, goldenCanvas, blackWhiteCanvas, deltaCanvas } = data;\n                this.candidateCanvas = candidateCanvas;\n                this.candidateContext = candidateCanvas.getContext('2d');\n                this.goldenCanvas = goldenCanvas;\n                this.goldenContext = goldenCanvas.getContext('2d');\n                this.blackWhiteCanvas = blackWhiteCanvas;\n                this.blackWhiteContext = blackWhiteCanvas.getContext('2d');\n                this.deltaCanvas = deltaCanvas;\n                this.deltaContext = deltaCanvas.getContext('2d');\n                break;\n            }\n            case 'images-assigned': {\n                const { candidateImageBuffer, goldenImageBuffer, dimensions } = data;\n                if (this.candidateCanvas == null || this.goldenCanvas == null ||\n                    this.blackWhiteCanvas == null || this.deltaCanvas == null) {\n                    console.warn('Images assigned before canvases are available!');\n                }\n                this.candidateCanvas.width = this.goldenCanvas.width =\n                    this.blackWhiteCanvas.width = this.deltaCanvas.width =\n                        dimensions.width;\n                this.candidateCanvas.height = this.goldenCanvas.height =\n                    this.blackWhiteCanvas.height = this.deltaCanvas.height =\n                        dimensions.height;\n                const candidateArray = new Uint8ClampedArray(candidateImageBuffer);\n                const goldenArray = new Uint8ClampedArray(goldenImageBuffer);\n                const { width, height } = dimensions;\n                this.analyzer =\n                    new ImageComparator(candidateArray, goldenArray, dimensions);\n                this.candidateContext.putImageData(new ImageData(candidateArray, width, height), 0, 0);\n                this.goldenContext.putImageData(new ImageData(goldenArray, width, height), 0, 0);\n                break;\n            }\n            case 'threshold-changed': {\n                const { threshold } = data;\n                const { analyzer } = this;\n                if (analyzer == null) {\n                    console.warn(`Analyzer not created!`);\n                    return;\n                }\n                const { width, height } = this.analyzer.dimensions;\n                const result = analyzer.generateVisuals(threshold);\n                this.blackWhiteContext.putImageData(new ImageData(new Uint8ClampedArray(result.imageBuffers.blackWhite), width, height), 0, 0);\n                this.deltaContext.putImageData(new ImageData(new Uint8ClampedArray(result.imageBuffers.delta), width, height), 0, 0);\n                port.postMessage({ type: 'analysis-completed', result });\n                break;\n            }\n            default:\n                break;\n        }\n    }\n    onGlobalMessage(event) {\n        event.ports.forEach(port => port.onmessage = (event) => this.onMessage(event, port));\n    }\n}\nself.imageComparisonWorker = new ImageComparisonWorker();\n//# sourceMappingURL=image-comparison-worker.js.map"],"names":[],"mappings":"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"}